/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.kulemeevag.excel.demo;

import one.util.streamex.StreamEx;
import org.dhatim.fastexcel.reader.*;
import ru.kulemeevag.excel.demo.model.ExcelData;

import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class App {
    public static void main(String[] args) throws Exception {

        try (InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("codebook.xlsx"); var wb = new ReadableWorkbook(is)) {
            Sheet sheet = wb.findSheet("S_RULE").orElseThrow();
            try {
                List<Row> rows = StreamEx.of(sheet.read()).filter(r -> r.getFirstNonEmptyCell().isPresent()).toList();
                Row header = rows.get(0);
                rows.remove(0);
                Map<Integer, Field> headerMapping = getHeaderMapping(header);
                List<ExcelData> results = new ArrayList<>();
                rows.forEach(row -> extractRow(row, headerMapping, results));
                results.forEach(d ->
                        System.out.printf("row:%d; rule=%s; type=%s; result=%s%n",
                                d.getRowNum(),
                                d.getRule(),
                                d.getRuleType(),
                                d.getResult()
                        )
                );
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private static void extractRow(Row row, Map<Integer, Field> headerMapping, List<ExcelData> results) {
        if (row == null) {
            return;
        }
        ExcelData data = new ExcelData();
        data.setRowNum(row.getRowNum());
        row.stream().forEach(cell -> extractValue(headerMapping, data, cell));
        results.add(data);
    }

    private static void extractValue(Map<Integer, Field> headerMapping, ExcelData data, Cell cell) {
        if (cell == null || cell.getType().equals(CellType.EMPTY)) {
            return;
        }
        int columnIndex = cell.getColumnIndex();
        if (!headerMapping.containsKey(columnIndex)) {
            return;
        }
        Field field = headerMapping.get(columnIndex);
        field.setAccessible(true);
        try {
            field.set(data, cell.asString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Map<Integer, Field> getHeaderMapping(Row header) throws NoSuchFieldException {
        //Collect from class where field contains annotation SheetColumn
        Map<String, Field> fieldsMap = new HashMap<>();
        fieldsMap.put("RULE", ExcelData.class.getDeclaredField("rule"));
        fieldsMap.put("RULE_TYPE", ExcelData.class.getDeclaredField("ruleType"));
        fieldsMap.put("RESULT", ExcelData.class.getDeclaredField("result"));

        Map<Integer, Field> map = new HashMap<>();
        header.stream().parallel().forEach(cell -> {
            if (cell == null) {
                return;
            }
            String key = cell.getText().trim();
            if (fieldsMap.containsKey(key)) {
                map.put(cell.getColumnIndex(), fieldsMap.get(key));
            }
        });
        return map;
    }

}
